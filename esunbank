http://picketlink.org/gettingstarted/saml_sso/

Configuring a Service ProviderThe Service Provider or SP, is also a regular web application that provides specific services (usually related with your business) for your users. It relies on the IdP to receive a valid SAML Assertion with all user information in order to authenticate him locally.Let's take an example about how an SP looks like by looking this quickstart:
	* PicketLink Service Provider

The configuration of a SP is pretty much the same as those used to enable an application as an IdP. You still need to define a security-constraint.<security-constraint>  <web-resource-collection>    <web-resource-name>Manager command</web-resource-name>    <url-pattern>/*</url-pattern>  </web-resource-collection>   <auth-constraint>    <role-name>Manager</role-name>  </auth-constraint></security-constraint>The security constraint above is protecting all resources with role Manager. The role will be retrieved by the Service Provider by looking the statements defined in the SAML Assertion.As mentioned before, the Service Provider receives a SAML Assertion from the IdP. We need somehow get all user information from the assertion to authenticate the user locally. PicketLink provides a specific JAAS LoginModule that knows how to process SAML Assertions and authenticate users based on that information.<security-domain name="sp" cache-type="default">  <authentication>    <login-module code="org.picketlink.identity.federation.bindings.jboss.auth.SAML2LoginModule" flag="required"/>  </authentication></security-domain>When using JBoss EAP or Wildfly you just need to add a security-domain like above to your ${JBOSS_HOME}/standalone/configuration/standalone.xml. And of course, reference it from your application using the WEB-INF/jboss-web.xml file:<jboss-web>  <security-domain>sp</security-domain></jboss-web>Service Providers also require the configuration for a specific PicketLink Authenticator in order to enable SAML processing. When using JBoss EAP 6 for example, you configure the authenticator by specifying a valve configuration to the WEB-INF/jboss-web.xml file.<jboss-web>  <security-domain>sp</security-domain>   <valve>    <class-name>org.picketlink.identity.federation.bindings.tomcat.sp.ServiceProviderAuthenticator</class-name>  </valve></jboss-web>When using Undertow, the configuration is a little different. You enable the authenticator by configuring an Undertow Servlet Extension to your deployment by adding a file /WEB-INF/classes/META-INF/services/io.undertow.servlet.ServletExtension to your deployment.org.picketlink.identity.federation.bindings.wildfly.sp.SPServletExtensionFor last, you need to provide the configuration for the SP. This is done by adding a WEB-INF/picketlink.xml file to your deployment.<PicketLink xmlns="urn:picketlink:identity-federation:config:2.1">  <PicketLinkSP xmlns="urn:picketlink:identity-federation:config:2.1" BindingType="POST">    <IdentityURL>${idp.url::http://localhost:8080/idp/}</IdentityURL>     <ServiceURL>${sales-post.url::http://localhost:8080/sales-post/}</ServiceURL>  </PicketLinkSP>   <Handlers xmlns="urn:picketlink:identity-federation:handler:config:2.1">    <Handler class="org.picketlink.identity.federation.web.handlers.saml2.SAML2LogOutHandler" />    <Handler class="org.picketlink.identity.federation.web.handlers.saml2.SAML2AuthenticationHandler" />    <Handler class="org.picketlink.identity.federation.web.handlers.saml2.RolesGenerationHandler" />  </Handlers></PicketLink>This file is responsible to provide all the configuration for a given Service Provider. PicketLink provides a lot of configuration options such as signature support and encryption. For more information, please read this documentation.
